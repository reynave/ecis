<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="preconnect" href="https://fonts.googleapis.com">
   <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
   <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet">
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
   <link href="./style.css" rel="stylesheet">
   <title>Epixlog Report</title>
</head>

<body>
   <div class="container-fluid">

      <div class="row">

         <div class="col-12">
            <div class="p-5 text-center" id="loading">
               <div>
                  <img src="./Animation - 1729584499834.gif" width="100">
               </div>
               <div> Loading...</div>
            </div>
         </div>
      </div>
   </div>
   <script src="./env.js"></script>


   <script src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"></script>

   <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
   <script>
      var urlParams = new URLSearchParams(window.location.search);

      const getParam = {
         startDate: '2024-01-01',
         brand: 'IK',
         // db: urlParams.get('db'),
      }

      const formatter = new Intl.NumberFormat('en-US', {
         style: 'currency',
         currency: 'IDR',
      });
      var digit = 2;
      let items = [];
      let sheetData = [];
      function currency(val) {
         return val == null ? 0 : formatter.format(val.toFixed(digit)).replace("IDR", "");
      }
      $(document).ready(function () {
         console.log("MASUK");

         $.ajax({
            type: 'GET',
            url: base_api + 'report/billTotalRange',
            data: getParam,
            dataType: 'json',
            success: function (data) {
               console.log(data);
               sheetData = data['sheet'];
               exportJsonToExcel();
               $("#loading").html("Finish");
               window.close();
            },
            error: function (err) {
               console.log(err);
               $('#loading').html("<strong class='text-danger'>ERROR DB / DB NOT FOUND</strong>");
            }
         });

      });






      function exportJsonToExcel() {
         // Create a new workbook 
         const workbook = XLSX.utils.book_new();
         let worksheet = null;

         const formatCurrencyForColumns = (worksheet, excludeColumns = 2) => {
            const range = XLSX.utils.decode_range(worksheet["!ref"]); // Dapatkan range data

            for (let col = excludeColumns; col <= range.e.c; col++) { // Mulai dari kolom ke-3
               for (let row = range.s.r + 1; row <= range.e.r; row++) { // Lewati header
                  const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });
                  const cell = worksheet[cellAddress];
                  if (cell && typeof cell.v === "number") { // Pastikan nilai adalah angka
                     cell.z = "#,##0"; // Format uang dengan pemisah ribuan
                  }
               }
            }
         };

         const calculateColumnWidths = (data, startColumn = 2) => {
            const keys = Object.keys(data[0]); // Mendapatkan nama kolom dari objek pertama
            const columnWidths = Array(startColumn - 1).fill({ wch: 25 }); // Placeholder untuk kolom sebelum C 
            keys.forEach((key) => {
               const maxLength = Math.max(
                  key.length, // Panjang nama kolom
                  ...data.map(row => (row[key] ? row[key].toString().length : 0)) // Panjang data di kolom tersebut
               );
               columnWidths.push({ wch: 15 }); // Tambahkan padding untuk estetika
            });

            return columnWidths;
         };

         // Append the worksheet to the workbook 
         for (let i = 0; i < sheetData.length; i++) {
            worksheet = XLSX.utils.json_to_sheet(sheetData[i]['data']);


            const headerCell = worksheet['A1']; // Misal A1 adalah sel header pertama
            if (headerCell) {
               worksheet['A1'].s = {
                  font: { bold: true }, // Bold
                  fill: {
                     fgColor: { rgb: "FFFF00" } // Warna latar belakang kuning
                  }
               };
            }


            formatCurrencyForColumns(worksheet, 2);
            worksheet["!cols"] = calculateColumnWidths(sheetData[i]['data'], 3);

            XLSX.utils.book_append_sheet(workbook, worksheet, sheetData[i]['name']);

         }

         //let nameFile = urlParams.get('year') + '_' + urlParams.get('month') + '_' + urlParams.get('db') + ".xlsx";
         let nameFile = "Bill Total Range Report .xlsx";

         // Export the workbook as an Excel file
         XLSX.writeFile(workbook, nameFile);
      }

      // Event listener for the export button
      // document.getElementById("export-btn").addEventListener("click", exportJsonToExcel);
   </script>
</body>

</html>